{
    "docs": [
        {
            "location": "/", 
            "text": "About Guggy\n\n\nGuggy is a service that turns text into a whimsy GIF instantly. \n\n\nWe use smart tech and NLP to automatically deliver a relevant humorous GIF with the user's text message embedded. \n\n\nWith Guggy, text is expressed in a graphically, engaging way and enhances messaging experience across multiple apps and platforms.\n\n\nRead more at our \nblog\n\n\nUse these docs to learn how to integrate Guggy into your product.\n\n\nIntegrating Guggy in your project\n\n\nGuggy is available in a wide range of platforms.\n\n\nBrowse our docs to find the platform of your needs.\n\n\nIf what you need is missing, contact us at \nsupport@guggy.com\n\n\n\n\nGuggy Button To GIF\n\n\nOur SDKs \n API contain the \ncreateGug\n method which receives a text and returns a generated GIF.\n\n\nUse this method to automatically create the GIF from the user's text (without a preview)\n\n\n\n\n\n\n\n\nPreviewing Results\n\n\nIn order to integrate Guggy as a GIF provider, you can use the preview API as the user types to receive a downsampled version of the GIF.\n\n\nIn this example Guggy is the first GIF provider:\n\n\n\n\nNavigating in docs\n\n\nHere you will find Guggy SDK Documentation.\n\n\n\n\nAndroid\n\n\niOS\n\n\nJavascript SDK\n\n\nRest API\n\n\n\n\nGetting an API Key\n\n\nOur API is free. Contact us at \napi@guggy.com\n to retrieve an API Key.\n\n\nSupport\n\n\nFor any questions or support, contact \nsupport@guggy.com\n\n\n\n\nBack to guggy.com", 
            "title": "Welcome"
        }, 
        {
            "location": "/#about-guggy", 
            "text": "Guggy is a service that turns text into a whimsy GIF instantly.   We use smart tech and NLP to automatically deliver a relevant humorous GIF with the user's text message embedded.   With Guggy, text is expressed in a graphically, engaging way and enhances messaging experience across multiple apps and platforms.  Read more at our  blog  Use these docs to learn how to integrate Guggy into your product.", 
            "title": "About Guggy"
        }, 
        {
            "location": "/#integrating-guggy-in-your-project", 
            "text": "Guggy is available in a wide range of platforms.  Browse our docs to find the platform of your needs.  If what you need is missing, contact us at  support@guggy.com", 
            "title": "Integrating Guggy in your project"
        }, 
        {
            "location": "/#guggy-button-to-gif", 
            "text": "Our SDKs   API contain the  createGug  method which receives a text and returns a generated GIF.  Use this method to automatically create the GIF from the user's text (without a preview)", 
            "title": "Guggy Button To GIF"
        }, 
        {
            "location": "/#previewing-results", 
            "text": "In order to integrate Guggy as a GIF provider, you can use the preview API as the user types to receive a downsampled version of the GIF.  In this example Guggy is the first GIF provider:", 
            "title": "Previewing Results"
        }, 
        {
            "location": "/#navigating-in-docs", 
            "text": "Here you will find Guggy SDK Documentation.   Android  iOS  Javascript SDK  Rest API", 
            "title": "Navigating in docs"
        }, 
        {
            "location": "/#getting-an-api-key", 
            "text": "Our API is free. Contact us at  api@guggy.com  to retrieve an API Key.", 
            "title": "Getting an API Key"
        }, 
        {
            "location": "/#support", 
            "text": "For any questions or support, contact  support@guggy.com   Back to guggy.com", 
            "title": "Support"
        }, 
        {
            "location": "/android/", 
            "text": "Getting Started\n\n\nIncluding Guggy in your project\n\n\nAdd the following, under dependencies, in your app build.gradle file:\n\n\nrepositories {\n    maven {\n        url 'https://dl.bintray.com/guggy/maven/'\n    }\n}\n\n\n\n\nIn your dependencies part of the build.gradle file add:\n\n\ncompile 'com.guggy.guggysdk:guggy:2.0.8'\n\n\n\n\n\n\nHighly Recommended: Add the Guggy content provider to your\nAndroidManifest.xml. \n\nThis allows to share the GIFs via a secure content://\nuri\n\n\n\n\nprovider\n    android:name=\ncom.guggy.guggysdk.contentprovider.GuggyProvider\n\n    android:authorities=\nYOUR.PACKAGE.NAME.guggyprovider\n\n    android:exported=\nfalse\n\n    android:grantUriPermissions=\ntrue\n\n\n/provider\n\n\n\n\n\nIn a starting point in your app make the following call:\n\n\nGuggy.init(\n    \nYOUR_API_KEY\n,\n    getApplicationContext()\n);\n\n\n\n\nIn an exiting point in your app make the following call:\n\n\nGuggy.destroy();\n\n\n\n\nIf you must call \nGuggy.init()\n without destroying, you can check\n\nif Guggy is already initialized by calling \nGuggy.isInitialized()\n.    \n\n\nCreating GIFs\n\n\nIn your onClick handler, make the following call:\n\n\nGuggy.createGug(\n        someString,\n        new RequestConfiguration(\n                FileFormat.MP4,\n                URIMode.LocalContentProvider\n        ),\n        getApplicationContext(),\n        new ITwoParamsCallback\nResult, RequestConfiguration\n() {\n            @Override\n            public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n\n                String generatedURL = result.getUrl();\n\n            }\n\n            @Override\n            public void onError(Exception e) {\n\n            }\n        }\n);\n\n\n\n\nNote that the Guggy logo should be used as an image for the button.\n\n\nPreviewing Results\n\n\nIn order to integrate Guggy as a GIF provider, you can use the preview API as the user types to receive a downsampled version of the GIF.\n\n\nUse the following method:\n\n\nString lastReqId;\n\n// Preview - call this method onType or equivalent method\nGuggy.preview(\n    getTheText(), \n    new RequestConfiguration(FileFormat.MP4, URIMode.LocalFile), \n    getApplicationContext(), \n    new ITwoParamsCallback\nGuggyResult, RequestConfiguration\n() {\n        @Override\n        public void onComplete(final GuggyResult guggyResult, final RequestConfiguration requestConfiguration) {\n\n            // You need to send the same reqId when generating the final result\n            lastReqId = guggyResult.getReqId(); \n\n        }\n\n        @Override\n        public void onError(Exception error) {\n\n            // Handle\n\n        }\n    }\n);\n\n// When the user has chosen, provide the request ID\n\nGuggy.createGug(\n        lastReqId,\n        getTheText(),\n        new RequestConfiguration(FileFormat.MP4, URIMode.Remote),\n        getApplicationContext(),\n        new ITwoParamsCallback\nCreateGugResult, RequestConfiguration\n() {\n            @Override\n            public void onComplete(CreateGugResult gugResult, RequestConfiguration requestConfiguration) {\n\n                String url = gugResult.getUrl();\n\n            }\n\n            @Override\n            public void onError(Exception error) {\n\n                String err = error.getMessage();\n\n            }\n        }\n);\n\n\n\n\n\nKeyboard Developers\n\n\nInitializing\n\n\nInitializing Guggy with an InputMethodService allows fully automatic behaviour, that is,\n\nreading the text and handling the GIF generation callback.\n\n\nJust call:\n\n\nGuggy.init(\n        \nYOUR_API_KEY\n,\n        this, // The InputMethodService\n        getApplicationContext()\n);\n\n\n\n\nAnd on your keyboard button click just call\n\n\nGuggy.createGug();\n\n\n\n\nYou should init at the InputMethodService's \nonCreate\n and destroy Guggy at the InputMethodService's \nonDestroy\n\n\nPreviewing Results\n\n\nFor keyboards the API is a bit simplified:\n\n\n\nGuggy.preview(\n    new RequestConfiguration(FileFormat.GIF, URIMode.Remote),\n    new ITwoParamsCallback\nGuggyResult, RequestConfiguration\n() {\n        @Override\n        public void onComplete(GuggyResult guggyResult, RequestConfiguration requestConfiguration) {\n\n            // Show preview\n\n        }\n\n        @Override\n        public void onError(Exception e) {\n\n        }\n});\n\n// When the use has chosen just call:\n\nGuggy.createGug(guggyResult.getReqId());\n\n\n\n\n\nNotes\n\n\nWhatsapp GIF support\n\n\nThe SDK defaults to sending a GIF file to Whatsapp, which is supported only in Whatapp's beta version at the moment.\n\n\nAs a workaround until Whatsapp finalizes support in GIFs,\nYou can configure the SDK to send a mp4 file which is supported on Whatsapp's public version.\nThe user can then send it as a GIF. See more in our \nblog\n\n\nAdd the following line after initializing Guggy:\n\n\nGuggyAutoDetect.getConfig(\ncom.whatsapp\n).setFileFormat(FileFormat.MP4);\n\n\n\n\nProguard\n\n\nAdd the following to your proguard configuration:\n\n\n-keep class com.guggy.** { *; }\n-dontwarn com.guggy.**\n\n\n\nPermissions\n\n\nFor API 19 and up, only the INTERNET permission is needed.\n\n\nFor older APIs, the READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions\nare needed in order to save result files and enable other apps to use them.", 
            "title": "Android"
        }, 
        {
            "location": "/android/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/android/#including-guggy-in-your-project", 
            "text": "Add the following, under dependencies, in your app build.gradle file:  repositories {\n    maven {\n        url 'https://dl.bintray.com/guggy/maven/'\n    }\n}  In your dependencies part of the build.gradle file add:  compile 'com.guggy.guggysdk:guggy:2.0.8'   Highly Recommended: Add the Guggy content provider to your\nAndroidManifest.xml.  \nThis allows to share the GIFs via a secure content://\nuri   provider\n    android:name= com.guggy.guggysdk.contentprovider.GuggyProvider \n    android:authorities= YOUR.PACKAGE.NAME.guggyprovider \n    android:exported= false \n    android:grantUriPermissions= true  /provider   In a starting point in your app make the following call:  Guggy.init(\n     YOUR_API_KEY ,\n    getApplicationContext()\n);  In an exiting point in your app make the following call:  Guggy.destroy();  If you must call  Guggy.init()  without destroying, you can check \nif Guggy is already initialized by calling  Guggy.isInitialized() .", 
            "title": "Including Guggy in your project"
        }, 
        {
            "location": "/android/#creating-gifs", 
            "text": "In your onClick handler, make the following call:  Guggy.createGug(\n        someString,\n        new RequestConfiguration(\n                FileFormat.MP4,\n                URIMode.LocalContentProvider\n        ),\n        getApplicationContext(),\n        new ITwoParamsCallback Result, RequestConfiguration () {\n            @Override\n            public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n\n                String generatedURL = result.getUrl();\n\n            }\n\n            @Override\n            public void onError(Exception e) {\n\n            }\n        }\n);  Note that the Guggy logo should be used as an image for the button.", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/android/#previewing-results", 
            "text": "In order to integrate Guggy as a GIF provider, you can use the preview API as the user types to receive a downsampled version of the GIF.  Use the following method:  String lastReqId;\n\n// Preview - call this method onType or equivalent method\nGuggy.preview(\n    getTheText(), \n    new RequestConfiguration(FileFormat.MP4, URIMode.LocalFile), \n    getApplicationContext(), \n    new ITwoParamsCallback GuggyResult, RequestConfiguration () {\n        @Override\n        public void onComplete(final GuggyResult guggyResult, final RequestConfiguration requestConfiguration) {\n\n            // You need to send the same reqId when generating the final result\n            lastReqId = guggyResult.getReqId(); \n\n        }\n\n        @Override\n        public void onError(Exception error) {\n\n            // Handle\n\n        }\n    }\n);\n\n// When the user has chosen, provide the request ID\n\nGuggy.createGug(\n        lastReqId,\n        getTheText(),\n        new RequestConfiguration(FileFormat.MP4, URIMode.Remote),\n        getApplicationContext(),\n        new ITwoParamsCallback CreateGugResult, RequestConfiguration () {\n            @Override\n            public void onComplete(CreateGugResult gugResult, RequestConfiguration requestConfiguration) {\n\n                String url = gugResult.getUrl();\n\n            }\n\n            @Override\n            public void onError(Exception error) {\n\n                String err = error.getMessage();\n\n            }\n        }\n);", 
            "title": "Previewing Results"
        }, 
        {
            "location": "/android/#keyboard-developers", 
            "text": "", 
            "title": "Keyboard Developers"
        }, 
        {
            "location": "/android/#initializing", 
            "text": "Initializing Guggy with an InputMethodService allows fully automatic behaviour, that is, \nreading the text and handling the GIF generation callback.  Just call:  Guggy.init(\n         YOUR_API_KEY ,\n        this, // The InputMethodService\n        getApplicationContext()\n);  And on your keyboard button click just call  Guggy.createGug();  You should init at the InputMethodService's  onCreate  and destroy Guggy at the InputMethodService's  onDestroy", 
            "title": "Initializing"
        }, 
        {
            "location": "/android/#previewing-results_1", 
            "text": "For keyboards the API is a bit simplified:  \nGuggy.preview(\n    new RequestConfiguration(FileFormat.GIF, URIMode.Remote),\n    new ITwoParamsCallback GuggyResult, RequestConfiguration () {\n        @Override\n        public void onComplete(GuggyResult guggyResult, RequestConfiguration requestConfiguration) {\n\n            // Show preview\n\n        }\n\n        @Override\n        public void onError(Exception e) {\n\n        }\n});\n\n// When the use has chosen just call:\n\nGuggy.createGug(guggyResult.getReqId());", 
            "title": "Previewing Results"
        }, 
        {
            "location": "/android/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/android/#whatsapp-gif-support", 
            "text": "The SDK defaults to sending a GIF file to Whatsapp, which is supported only in Whatapp's beta version at the moment.  As a workaround until Whatsapp finalizes support in GIFs,\nYou can configure the SDK to send a mp4 file which is supported on Whatsapp's public version.\nThe user can then send it as a GIF. See more in our  blog  Add the following line after initializing Guggy:  GuggyAutoDetect.getConfig( com.whatsapp ).setFileFormat(FileFormat.MP4);", 
            "title": "Whatsapp GIF support"
        }, 
        {
            "location": "/android/#proguard", 
            "text": "Add the following to your proguard configuration:  -keep class com.guggy.** { *; }\n-dontwarn com.guggy.**", 
            "title": "Proguard"
        }, 
        {
            "location": "/android/#permissions", 
            "text": "For API 19 and up, only the INTERNET permission is needed.  For older APIs, the READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions\nare needed in order to save result files and enable other apps to use them.", 
            "title": "Permissions"
        }, 
        {
            "location": "/ios-swift/", 
            "text": "Getting Started\n\n\nIncluding Guggy in your project\n\n\nIn your \npodfile\n, insert the following line:\n\n\npod 'guggysdk' , \n~\n 0.0.9\n\n\n\n\n\nIn every file referencing Guggy add the following\n\n\nimport guggysdk\n\n\n\n\nIn a starting point in your app make the following call:\n\n\ntry! Guggy.initialize(YOUR_API_KEY_HERE) // Throws an AlreadyInitialized error\n\n\n\n\nIf you want to work with http instead of https (would require an exception for *.guggy.com in your info.plist) you can configure it with\n\n\nGuggy.isAllowHttp = true\n\n\n\n\nIn an exiting point in your app make the following call:\n\n\nGuggy.destroy();\n\n\n\n\nCreating GIFs\n\n\nIn your onClick handler, make one of the following calls, according to your needs:\n\n\nGenerate the gug and download it as a local file URL. The result will also contain the NSData.\n\n\ncreateGug(text:String, format: ResultFormat, onGenerateComplete:((GuggyResult?) -\n Void)?, onDownloadComplete: (GuggyResult?) -\n Void)\n\n\n\n\nGenerate the gug. The result will contain the remote URL only\n\n\ncreateGug(text:String, format: ResultFormat, onComplete: (GuggyResult?) -\n Void)\n\n\n\n\nOptions:\n\n\nformat\n - Either .GIF or .Mp4\n\n\nExample:\n\n\nGuggy.createGug(textField.text!, format: .GIF) { result in\n\n    // Handle result\n\n}\n\n\n\n\nThe result will contain the following fields:\n\n\nurl\n - Remote URL of the generated media\n\n\nlocalUrl\n - Local URL of the generated media. \nWill be \nnil\n if download was skipped\n\n\ndata\n - NSData of the generated media. \nWill be \nnil\n if download was skipped\n\n\nwidth\n - Width of media\n\n\nheight\n - Height of media\n\n\nPreviewing background GIF\n\n\nYou can preview the background GIF as the user types.\n\n\n\n\nThe preview is in mp4 format.\n\n\n\n\nCall \nonType(text:String, onStart:(()-\n())?, onComplete: (String?)\n on your keyDown or equivalent event.\n\n\nOptions:\n\n\nonStart\n - A callback which is fired when Guggy starts searching for media. \nNot every call to \nonType\n will cause a media search due to debouncing\n\n\nonComplete\n - A callback which is fired once the media search is over with a String containing a URL to the local mp4 file which can be played using AVLayer.\nIf the context extracted is equal to the last context extraction request, the url will be \nnil\n\n\nExample:\n\n\nGuggy.onType(textView.text, onStart: {self.activityIndicatorView.startAnimating()}) { url -\n Void in\n\n    if let url = url {\n\n        self.videoView.play(\n            NSURL(string: url)!,\n            aspectFill: false,\n            onPlay: onPlay\n        )\n\n    }\n\n}\n\n\n\n\nSubsequent calls to \nGuggy.createGug\n will use the last video extracted as the GIF background.\n\n\nGetting a random GIF\n\n\nIf you need an initial GIF to show in the preview before the user is typing, call:\n\n\nGuggy.getRandomGIF() { url in\n\n    if let url = url {\n\n            self.videoView.play(\n                NSURL(string: url)!,\n                aspectFill: false,\n                onPlay: onPlay\n            )\n\n     }\n\n}\n\n\n\n\n\n\nNote that the Guggy logo should be used as an image for the button used to create the GIFs", 
            "title": "iOS (Swift)"
        }, 
        {
            "location": "/ios-swift/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/ios-swift/#including-guggy-in-your-project", 
            "text": "In your  podfile , insert the following line:  pod 'guggysdk' ,  ~  0.0.9   In every file referencing Guggy add the following  import guggysdk  In a starting point in your app make the following call:  try! Guggy.initialize(YOUR_API_KEY_HERE) // Throws an AlreadyInitialized error  If you want to work with http instead of https (would require an exception for *.guggy.com in your info.plist) you can configure it with  Guggy.isAllowHttp = true  In an exiting point in your app make the following call:  Guggy.destroy();", 
            "title": "Including Guggy in your project"
        }, 
        {
            "location": "/ios-swift/#creating-gifs", 
            "text": "In your onClick handler, make one of the following calls, according to your needs:  Generate the gug and download it as a local file URL. The result will also contain the NSData.  createGug(text:String, format: ResultFormat, onGenerateComplete:((GuggyResult?) -  Void)?, onDownloadComplete: (GuggyResult?) -  Void)  Generate the gug. The result will contain the remote URL only  createGug(text:String, format: ResultFormat, onComplete: (GuggyResult?) -  Void)  Options:  format  - Either .GIF or .Mp4  Example:  Guggy.createGug(textField.text!, format: .GIF) { result in\n\n    // Handle result\n\n}  The result will contain the following fields:  url  - Remote URL of the generated media  localUrl  - Local URL of the generated media.  Will be  nil  if download was skipped  data  - NSData of the generated media.  Will be  nil  if download was skipped  width  - Width of media  height  - Height of media", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/ios-swift/#previewing-background-gif", 
            "text": "You can preview the background GIF as the user types.   The preview is in mp4 format.   Call  onType(text:String, onStart:(()- ())?, onComplete: (String?)  on your keyDown or equivalent event.  Options:  onStart  - A callback which is fired when Guggy starts searching for media.  Not every call to  onType  will cause a media search due to debouncing  onComplete  - A callback which is fired once the media search is over with a String containing a URL to the local mp4 file which can be played using AVLayer.\nIf the context extracted is equal to the last context extraction request, the url will be  nil  Example:  Guggy.onType(textView.text, onStart: {self.activityIndicatorView.startAnimating()}) { url -  Void in\n\n    if let url = url {\n\n        self.videoView.play(\n            NSURL(string: url)!,\n            aspectFill: false,\n            onPlay: onPlay\n        )\n\n    }\n\n}  Subsequent calls to  Guggy.createGug  will use the last video extracted as the GIF background.", 
            "title": "Previewing background GIF"
        }, 
        {
            "location": "/ios-swift/#getting-a-random-gif", 
            "text": "If you need an initial GIF to show in the preview before the user is typing, call:  Guggy.getRandomGIF() { url in\n\n    if let url = url {\n\n            self.videoView.play(\n                NSURL(string: url)!,\n                aspectFill: false,\n                onPlay: onPlay\n            )\n\n     }\n\n}   Note that the Guggy logo should be used as an image for the button used to create the GIFs", 
            "title": "Getting a random GIF"
        }, 
        {
            "location": "/js-sdk/", 
            "text": "Including Guggy\n\n\nNPM Module\n\n\nnpm install --save @guggy/guggy-js-sdk\n\n\nIncluding the SDK in your site\n\n\nInclude the script tag:\n\n\nscript src=\nhttps://cdn.rawgit.com/Guggyco/guggy-web-sdk/1.4.2/guggy-sdk.min.js\n/script\n\n\n\n\n\nInitializing Guggy\n\n\nOptions are:\n\n\napiKey\n - \nMandatory\n\n\nonStart\n - Optional callback to be excuted when the GIF generation starts.\n\n\nuserId\n - A unique identifier of your user\n\n\nGuggy.init({\n    opts\n});\n\n\n\n\nCreating GIFs\n\n\nIf you're using the direct API, just initialize with the \napiKey\n option.\n\n\nThen call Guggy whenever's needed:\n\n\nGuggy.createGug(sentence, function (result, err) {\n   // Handle result\n});\n\n\n\n\nPreviewing background GIF\n\n\nYou can preview the background GIF as the user types.\n\n\n\n\nThe preview is in mp4 format.\n\n\n\n\nCall \nGuggy.onType\n on your keyDown or equivalent event.\n\n\nParameters that will be passed to the callback:\n\n\nmediaItem\n - The media item containing the url of the video which matches the preview.\nWill be \nnull\n if the context extracted is equal to the last result.\n\n\nGuggy.onType(input.value, function (mediaItem) {\n\n    if (mediaItem) {\n\n        someVideoElement.src = mediaItem.url;\n\n    }\n\n})\n\n\n\n\nCalling \nGuggy.createGug()\n will produce the GIF according the last result previewed.\n\n\nGetting a random GIF\n\n\nIf you need an initial GIF to show in the preview before the user is typing, call:\n\n\nGuggy.getRandomGIF(function(item, err){\n\n    someVideoElement.src = item.url;\n\n})", 
            "title": "JS SDK"
        }, 
        {
            "location": "/js-sdk/#including-guggy", 
            "text": "", 
            "title": "Including Guggy"
        }, 
        {
            "location": "/js-sdk/#npm-module", 
            "text": "npm install --save @guggy/guggy-js-sdk", 
            "title": "NPM Module"
        }, 
        {
            "location": "/js-sdk/#including-the-sdk-in-your-site", 
            "text": "Include the script tag:  script src= https://cdn.rawgit.com/Guggyco/guggy-web-sdk/1.4.2/guggy-sdk.min.js /script", 
            "title": "Including the SDK in your site"
        }, 
        {
            "location": "/js-sdk/#initializing-guggy", 
            "text": "Options are:  apiKey  -  Mandatory  onStart  - Optional callback to be excuted when the GIF generation starts.  userId  - A unique identifier of your user  Guggy.init({\n    opts\n});", 
            "title": "Initializing Guggy"
        }, 
        {
            "location": "/js-sdk/#creating-gifs", 
            "text": "If you're using the direct API, just initialize with the  apiKey  option.  Then call Guggy whenever's needed:  Guggy.createGug(sentence, function (result, err) {\n   // Handle result\n});", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/js-sdk/#previewing-background-gif", 
            "text": "You can preview the background GIF as the user types.   The preview is in mp4 format.   Call  Guggy.onType  on your keyDown or equivalent event.  Parameters that will be passed to the callback:  mediaItem  - The media item containing the url of the video which matches the preview.\nWill be  null  if the context extracted is equal to the last result.  Guggy.onType(input.value, function (mediaItem) {\n\n    if (mediaItem) {\n\n        someVideoElement.src = mediaItem.url;\n\n    }\n\n})  Calling  Guggy.createGug()  will produce the GIF according the last result previewed.", 
            "title": "Previewing background GIF"
        }, 
        {
            "location": "/js-sdk/#getting-a-random-gif", 
            "text": "If you need an initial GIF to show in the preview before the user is typing, call:  Guggy.getRandomGIF(function(item, err){\n\n    someVideoElement.src = item.url;\n\n})", 
            "title": "Getting a random GIF"
        }, 
        {
            "location": "/rest-api/", 
            "text": "Getting Started\n\n\nCreating GIFs\n\n\nSend a POST request to \n\n\nhttp://text2gif.guggy.com/guggify\n\n\n\n\nThe request headers should include:\n\n\n{\n    \nContent-Type\n:\napplication/json\n,\n    \napiKey\n:\nYOUR_API_KEY\n\n}\n\n\n\n\nThe request body should contain:\n\n\n{\n    \nformat\n: \nmp4\n, // either \ngif\n or \nmp4\n\n    \nsentence\n : \nsome sentence\n\n}\n\n\n\n\nThe response will be in the format of:\n\n\n{\n  \nreqId\n: \n5Ow7Ej46Sy\n,\n  \nmp4\n: \nhttps://i.guggy.com/SOMETHING.mp4\n, // or GIF\n  \nwidth\n: 300,\n  \nheight\n: 238\n}\n\n\n\n\nPreviewing Results\n\n\nIn order to integrate Guggy as a GIF provider, you can use the preview API as the user types to receive a downsampled version of the GIF.\n\n\nSend a POST request to\n\n\nhttp://text2gif.guggy.com/preview\n\n\n\n\nUsing the same headers and request body as a regular GIF create request.\n\n\nThe response will return a \nreqId\n value.\n\n\nTo generate the final high quality GIF, send a create GIF request as described above with the addition of a \nreqId\n parameter which contains the value returned by the preview request.", 
            "title": "Rest API"
        }, 
        {
            "location": "/rest-api/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/rest-api/#creating-gifs", 
            "text": "Send a POST request to   http://text2gif.guggy.com/guggify  The request headers should include:  {\n     Content-Type : application/json ,\n     apiKey : YOUR_API_KEY \n}  The request body should contain:  {\n     format :  mp4 , // either  gif  or  mp4 \n     sentence  :  some sentence \n}  The response will be in the format of:  {\n   reqId :  5Ow7Ej46Sy ,\n   mp4 :  https://i.guggy.com/SOMETHING.mp4 , // or GIF\n   width : 300,\n   height : 238\n}", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/rest-api/#previewing-results", 
            "text": "In order to integrate Guggy as a GIF provider, you can use the preview API as the user types to receive a downsampled version of the GIF.  Send a POST request to  http://text2gif.guggy.com/preview  Using the same headers and request body as a regular GIF create request.  The response will return a  reqId  value.  To generate the final high quality GIF, send a create GIF request as described above with the addition of a  reqId  parameter which contains the value returned by the preview request.", 
            "title": "Previewing Results"
        }
    ]
}