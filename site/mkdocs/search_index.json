{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/android/", 
            "text": "Getting an API Key\n\n\nOur API is free. Contact us at \napi@guggy.com\n to retrieve an API Key.\n\n\nIncluding Guggy in your project\n\n\nAdd the following, under dependencies, in your app build.gradle file:\n\n\nrepositories {\n    maven {\n        url 'https://dl.bintray.com/guggy/maven/'\n    }\n}\n\n\n\n\nIn your dependencies part of the build.gradle file add:\n\n\n compile 'com.guggy.guggysdk:guggy:1.0.1'\n\n\n\n\n\nHighly Recommended: Add the Guggy content provider to your\nAndroidManifest.xml. \n This allows to share the GIFs via a secure content://\nuri\n\n\n\n\nprovider\n    android:name=\"com.guggy.guggysdk.contentprovider.GuggyProvider\"\n    android:authorities=\"YOUR.PACKAGE.NAME.guggyprovider\"\n    android:exported=\"false\"\n    android:grantUriPermissions=\"true\"\n\n\n/provider\n\n\n\n\nIn a starting point in your app make the following call:\n\n\nGuggy.init(\n    \nYOUR_API_KEY\n,\n    getApplicationContext()\n);\n\n\n\n\nIn an exiting point in your app make the following call:\n\n\nGuggy.destroy();\n\n\n\n\nYou can now use Guggy to create GIFs.\n\n\nCreating GIFs\n\n\nThere are two options for creating GIFs:\n\n\nGuggyButton\n \u2014 A view which handles the API call to Guggy.\n\n\nGuggyCore\n \u2014 Allows to make the API call directly, but you\nwould need to implement the view yourself.\n\n\nGuggyButton\n\n\n\n\n\n\nPlace the button, either in a layout file or by creating it programmatically.\nFor example\n\n\nGuggyButton guggyButton = new GuggyButton();\n\n\n\n\n\n\nDefine a callback to retrieve the text once the button is clicked:\n\n\nguggyButton.setRetrieveTextFunction(\nIRetrieveTextFunction() {\n    @Override\n\n\nString getText() {\n\n\nmyEditText.getText()\n    }\n});\n\n\n\n\n\n\nSet the RequestConfigurationCallback \u2014 which sets the request parameters \u2014\nFile format (MP4 or GIF), Result URI mode (Local File, Local Content, Remote\nURI) and result handler (Paste URL, Share Intent or a custom which you can\ndefine).\n\n\nguggyButton.setRequestConfigurationCallback(\nIRequestConfigurationCallback() {\n    @Override\n\n\nRequestConfiguration getRequestConfiguration() {\n\n\nRequestConfiguration(\n                FileFormat.\n,\n                URIMode.\n);\n\n\n}\n\n\n\n});\n\n\n\n\n\n\nSet the result callback , which is called once the GIF is ready:\n\n\nguggyButton.setCallback(\nITwoParamsCallback\n() {\n    @Override\n\n\nonComplete(Result result, RequestConfiguration requestConfiguration) {\n\n\n    String gifURL = result.getUrl();\n\n    // Insert in your app\n\n}\n\n@Override\n\n\n\nonError(Exception e) {\n\n\n}\n});\n\n\n\n\n\n\nGuggy Core\n\n\nIn your onClick handler, make the following call:\n\n\nGuggy.\n(\n        someString,\n\nRequestConfiguration(\n                FileFormat.\n,\n                URIMode.\n),\n        getApplicationContext(),\n\nITwoParamsCallback\nResult, RequestConfiguration\n() {\n            @Override\n\nonComplete(Result result, RequestConfiguration requestConfiguration) {\n                String generatedURL = result.getUrl();\n            }\n            @Override\n\nonError(Exception e) {\n            }\n        }\n);\n\n\n\nYou can also send a Bitmap as the first parameter in order to use that image as\nthe GIF background.\n\n\nNote that the Guggy logo should be used as an image for the button.\n\n\nResult Preview\n\n\nYou can allow your users to choose the GIF background before generating the\nresult. You can expect between one and four results to show the user.\n\n\nUse the following method:\n\n\nGuggy.\n(getTheText(), getApplicationContext(),\nICallback\nGetMediaResult\n() {\n    @Override\n\nonComplete(GetMediaResult result) {\n        MediaItem mediaItem = result.getMedia().get(0);\nGuggy.\n(\n                result.getReqId(),\n                mediaItem,\n                getTheText(),\n\nRequestConfiguration(FileFormat.\n, URIMode.\n),\n                getApplicationContext(),\n\nITwoParamsCallback\nCreateGugResult, RequestConfiguration\n() {\n                    @Override\n\nonComplete(CreateGugResult gugResult, RequestConfiguration requestConfiguration) {\n                        String url = gugResult.getUrl();\n                    }\n                    @Override\n\nonError(Exception error) {\n                        String err = error.getMessage();\n                    }\n                }\n        );\n    }\n    @Override\n\nonError(Exception error) {\n\n}\n});\n\n\n\nProguard\n\n\nAdd the following to your proguard configuration:\n\n\n-keep class com.guggy.** { *; }\n-dontwarn com.guggy.**\n\n\n\nPermissions\n\n\nFor API 19 and up, only the INTERNET permission is needed.\n\n\nFor older APIs, the READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions\nare needed in order to save result files and enable other apps to use them.", 
            "title": "Andoroid SDK"
        }, 
        {
            "location": "/android/#getting-an-api-key", 
            "text": "Our API is free. Contact us at  api@guggy.com  to retrieve an API Key.", 
            "title": "Getting an API Key"
        }, 
        {
            "location": "/android/#including-guggy-in-your-project", 
            "text": "Add the following, under dependencies, in your app build.gradle file:  repositories {\n    maven {\n        url 'https://dl.bintray.com/guggy/maven/'\n    }\n}  In your dependencies part of the build.gradle file add:   compile 'com.guggy.guggysdk:guggy:1.0.1'   Highly Recommended: Add the Guggy content provider to your\nAndroidManifest.xml.   This allows to share the GIFs via a secure content://\nuri   provider\n    android:name=\"com.guggy.guggysdk.contentprovider.GuggyProvider\"\n    android:authorities=\"YOUR.PACKAGE.NAME.guggyprovider\"\n    android:exported=\"false\"\n    android:grantUriPermissions=\"true\"  /provider   In a starting point in your app make the following call:  Guggy.init(\n     YOUR_API_KEY ,\n    getApplicationContext()\n);  In an exiting point in your app make the following call:  Guggy.destroy();  You can now use Guggy to create GIFs.", 
            "title": "Including Guggy in your project"
        }, 
        {
            "location": "/android/#creating-gifs", 
            "text": "There are two options for creating GIFs:  GuggyButton  \u2014 A view which handles the API call to Guggy.  GuggyCore  \u2014 Allows to make the API call directly, but you\nwould need to implement the view yourself.", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/android/#guggybutton", 
            "text": "Place the button, either in a layout file or by creating it programmatically.\nFor example  GuggyButton guggyButton = new GuggyButton();    Define a callback to retrieve the text once the button is clicked:  guggyButton.setRetrieveTextFunction(\nIRetrieveTextFunction() {\n    @Override  String getText() {  myEditText.getText()\n    }\n});    Set the RequestConfigurationCallback \u2014 which sets the request parameters \u2014\nFile format (MP4 or GIF), Result URI mode (Local File, Local Content, Remote\nURI) and result handler (Paste URL, Share Intent or a custom which you can\ndefine).  guggyButton.setRequestConfigurationCallback(\nIRequestConfigurationCallback() {\n    @Override  RequestConfiguration getRequestConfiguration() {  RequestConfiguration(\n                FileFormat.\n,\n                URIMode.\n);  }  });    Set the result callback , which is called once the GIF is ready:  guggyButton.setCallback(\nITwoParamsCallback () {\n    @Override  onComplete(Result result, RequestConfiguration requestConfiguration) {      String gifURL = result.getUrl();\n\n    // Insert in your app\n\n}\n\n@Override  onError(Exception e) {  }\n});", 
            "title": "GuggyButton"
        }, 
        {
            "location": "/android/#guggy-core", 
            "text": "In your onClick handler, make the following call:  Guggy.\n(\n        someString,\n\nRequestConfiguration(\n                FileFormat.\n,\n                URIMode.\n),\n        getApplicationContext(),\n\nITwoParamsCallback Result, RequestConfiguration () {\n            @Override\n\nonComplete(Result result, RequestConfiguration requestConfiguration) {\n                String generatedURL = result.getUrl();\n            }\n            @Override\n\nonError(Exception e) {\n            }\n        }\n);  You can also send a Bitmap as the first parameter in order to use that image as\nthe GIF background.  Note that the Guggy logo should be used as an image for the button.", 
            "title": "Guggy Core"
        }, 
        {
            "location": "/android/#result-preview", 
            "text": "You can allow your users to choose the GIF background before generating the\nresult. You can expect between one and four results to show the user.  Use the following method:  Guggy.\n(getTheText(), getApplicationContext(),\nICallback GetMediaResult () {\n    @Override\n\nonComplete(GetMediaResult result) {\n        MediaItem mediaItem = result.getMedia().get(0);\nGuggy.\n(\n                result.getReqId(),\n                mediaItem,\n                getTheText(),\n\nRequestConfiguration(FileFormat.\n, URIMode.\n),\n                getApplicationContext(),\n\nITwoParamsCallback CreateGugResult, RequestConfiguration () {\n                    @Override\n\nonComplete(CreateGugResult gugResult, RequestConfiguration requestConfiguration) {\n                        String url = gugResult.getUrl();\n                    }\n                    @Override\n\nonError(Exception error) {\n                        String err = error.getMessage();\n                    }\n                }\n        );\n    }\n    @Override\n\nonError(Exception error) {\n\n}\n});", 
            "title": "Result Preview"
        }, 
        {
            "location": "/android/#proguard", 
            "text": "Add the following to your proguard configuration:  -keep class com.guggy.** { *; }\n-dontwarn com.guggy.**", 
            "title": "Proguard"
        }, 
        {
            "location": "/android/#permissions", 
            "text": "For API 19 and up, only the INTERNET permission is needed.  For older APIs, the READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions\nare needed in order to save result files and enable other apps to use them.", 
            "title": "Permissions"
        }
    ]
}