{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started\n\n\nGetting an API Key\n\n\nOur API is free. Contact us at \napi@guggy.com\n to retrieve an API Key.\n\n\nIncluding Guggy in your project\n\n\nAdd the following, under dependencies, in your app build.gradle file:\n\n\nrepositories {\n    maven {\n        url 'https://dl.bintray.com/guggy/maven/'\n    }\n}\n\n\n\n\nIn your dependencies part of the build.gradle file add:\n\n\ncompile 'com.guggy.guggysdk:guggy:1.0.3'\n\n\n\n\n\n\nHighly Recommended: Add the Guggy content provider to your\nAndroidManifest.xml. \n\nThis allows to share the GIFs via a secure content://\nuri\n\n\n\n\nprovider\n    android:name=\ncom.guggy.guggysdk.contentprovider.GuggyProvider\n\n    android:authorities=\nYOUR.PACKAGE.NAME.guggyprovider\n\n    android:exported=\nfalse\n\n    android:grantUriPermissions=\ntrue\n\n\n/provider\n\n\n\n\n\nIn a starting point in your app make the following call:\n\n\nGuggy.init(\n    \nYOUR_API_KEY\n,\n    getApplicationContext()\n);\n\n\n\n\nIn an exiting point in your app make the following call:\n\n\nGuggy.destroy();\n\n\n\n\nIf you must call \nGuggy.init()\n without destroying, you can check\n\nif Guggy is already initialized by calling \nGuggy.isInitialized()\n.    \n\n\nCreating GIFs\n\n\nThere are two options for creating GIFs:\n\n\nGuggyButton\n \u2014 A view which handles the API call to Guggy.\n\n\nDirect API\n \u2014 Allows to make the API call directly, but you\nwould need to implement the view yourself.\n\n\nGuggyButton\n\n\nPlace the button, either in a layout file or by creating it programmatically.\nFor example\n\n\nGuggyButton guggyButton = new GuggyButton();\n\n\n\nDefine a callback to retrieve the text once the button is clicked:\n\n\nguggyButton.setRetrieveTextFunction(new IRetrieveTextFunction() {\n    @Override\n    public String getText() {\n        return myEditText.getText()\n    }\n});\n\n\n\n\nSet the RequestConfigurationCallback, which sets the request parameters:\n\nFile format (MP4 or GIF), Result URI mode (Local File, Local Content, Remote\nURI) and result handler (Paste URL, Share Intent or a custom which you can\ndefine).\n\n\nguggyButton.setRequestConfigurationCallback(new IRequestConfigurationCallback() {\n    @Override\n    public RequestConfiguration getRequestConfiguration() {\n        return new RequestConfiguration(\n                FileFormat.GIF,\n                URIMode.LocalContentProvider\n        );\n    }\n});\n\n\n\n\nSet the result callback , which is called once the GIF is ready:\n\n\nguggyButton.setCallback(new ITwoParamsCallback\nResult, RequestConfiguration\n() {\n    @Override\n    public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n        String gifURL = result.getUrl(); \n        // Insert in your app\n\n    }\n    @Override\n    public void onError(Exception e) {\n        // We didn't make it\n    }\n});\n\n\n\n\n\n\nDirect API\n\n\nIn your onClick handler, make the following call:\n\n\nGuggy.createGug(\n        someString,\n        new RequestConfiguration(\n                FileFormat.MP4,\n                URIMode.LocalContentProvider\n        ),\n        getApplicationContext(),\n        new ITwoParamsCallback\nResult, RequestConfiguration\n() {\n            @Override\n            public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n\n                String generatedURL = result.getUrl();\n\n            }\n\n            @Override\n            public void onError(Exception e) {\n\n            }\n        }\n);\n\n\n\n\nNote that the Guggy logo should be used as an image for the button.\n\n\nMedia Preview\n\n\nYou can allow your users to choose the GIF background before generating the\nresult. You can expect between one and four results to show the user.\n\n\nUse the following method:\n\n\nGuggy.getMedia(getTheText(), getApplicationContext(), new ICallback\nGetMediaResult\n() {\n    @Override\n    public void onComplete(GetMediaResult result) {\n\n        MediaItem mediaItem = result.getMedia().get(0); // Show the results to the user\n\n        // When the user has chosen, provide the request ID and the selected MediaItem\n        Guggy.createGug(\n                result.getReqId(),\n                mediaItem,\n                getTheText(),\n                new RequestConfiguration(FileFormat.MP4, URIMode.Remote),\n                getApplicationContext(),\n                new ITwoParamsCallback\nCreateGugResult, RequestConfiguration\n() {\n                    @Override\n                    public void onComplete(CreateGugResult gugResult, RequestConfiguration requestConfiguration) {\n\n                        String url = gugResult.getUrl();\n\n                    }\n\n                    @Override\n                    public void onError(Exception error) {\n\n                        String err = error.getMessage();\n\n                    }\n                }\n        );\n\n    }\n\n    @Override\n    public void onError(Exception error) {\n\n        // Handle\n\n    }\n});\n\n\n\n\nKeyboard Developers\n\n\nInitializing\n\n\nInitializing Guggy with an InputMethodService allows fully automatic behaviour, that is,\n\nreading the text and handling the GIF generation callback.\n\n\nJust call:\n\n\nGuggy.init(\n        \nYOUR_API_KEY\n,\n        this, // The InputMethodService\n        getApplicationContext()\n);\n\n\n\n\nGuggyKeyboardButton\n\n\nAll that is needed is to create the button (via layout or programmatically).\n\n\nAdding the button on top of a \nKeyboardView\n is possible. If that's what you want to achieve,\nlet us know for directions.\n\n\nguggyKeyboardButton.setRequestConfigurationCallback(new IRequestConfigurationCallback() {\n    @Override\n    public RequestConfiguration getRequestConfiguration() {\n\n        // You can still get the auto detected configuration and inspect it\n        RequestConfiguration auto = guggyKeyboardButton.getAutoDetectedConfiguration();\n\n        return new RequestConfiguration(\n                FileFormat.GIF,\n                URIMode.LocalContentProvider\n        );\n\n    }\n});\n\n\n\n\nDirect API\n\n\nIf you wish to implement your own View component, you can stil call the direct API, like so:\n\n\nGuggy.createGug();\n\n\n\n\nMedia Preview\n\n\nThe API is a bit simplified compared to non-keyboard implementations:\n\n\nGuggy.getMedia(new ICallback\nGetMediaResult\n() {\n    @Override\n    public void onComplete(GetMediaResult getMediaResult) {\n       // Allow the user to choose the MediaItem \n       MediaItem mediaItem = getMediaResult.getMedia().get(0);\n\n      // When ready, make the following call\n      Guggy.createGug(getMediaResult.getReqId(), mediaItem);\n    }\n\n    @Override\n    public void onError(Exception e) {\n\n    }\n});\n\n\n\n\nNotes\n\n\nProguard\n\n\nAdd the following to your proguard configuration:\n\n\n-keep class com.guggy.** { *; }\n-dontwarn com.guggy.**\n\n\n\nPermissions\n\n\nFor API 19 and up, only the INTERNET permission is needed.\n\n\nFor older APIs, the READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions\nare needed in order to save result files and enable other apps to use them.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#getting-an-api-key", 
            "text": "Our API is free. Contact us at  api@guggy.com  to retrieve an API Key.", 
            "title": "Getting an API Key"
        }, 
        {
            "location": "/#including-guggy-in-your-project", 
            "text": "Add the following, under dependencies, in your app build.gradle file:  repositories {\n    maven {\n        url 'https://dl.bintray.com/guggy/maven/'\n    }\n}  In your dependencies part of the build.gradle file add:  compile 'com.guggy.guggysdk:guggy:1.0.3'   Highly Recommended: Add the Guggy content provider to your\nAndroidManifest.xml.  \nThis allows to share the GIFs via a secure content://\nuri   provider\n    android:name= com.guggy.guggysdk.contentprovider.GuggyProvider \n    android:authorities= YOUR.PACKAGE.NAME.guggyprovider \n    android:exported= false \n    android:grantUriPermissions= true  /provider   In a starting point in your app make the following call:  Guggy.init(\n     YOUR_API_KEY ,\n    getApplicationContext()\n);  In an exiting point in your app make the following call:  Guggy.destroy();  If you must call  Guggy.init()  without destroying, you can check \nif Guggy is already initialized by calling  Guggy.isInitialized() .", 
            "title": "Including Guggy in your project"
        }, 
        {
            "location": "/#creating-gifs", 
            "text": "There are two options for creating GIFs:  GuggyButton  \u2014 A view which handles the API call to Guggy.  Direct API  \u2014 Allows to make the API call directly, but you\nwould need to implement the view yourself.", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/#guggybutton", 
            "text": "Place the button, either in a layout file or by creating it programmatically.\nFor example  GuggyButton guggyButton = new GuggyButton();  Define a callback to retrieve the text once the button is clicked:  guggyButton.setRetrieveTextFunction(new IRetrieveTextFunction() {\n    @Override\n    public String getText() {\n        return myEditText.getText()\n    }\n});  Set the RequestConfigurationCallback, which sets the request parameters: \nFile format (MP4 or GIF), Result URI mode (Local File, Local Content, Remote\nURI) and result handler (Paste URL, Share Intent or a custom which you can\ndefine).  guggyButton.setRequestConfigurationCallback(new IRequestConfigurationCallback() {\n    @Override\n    public RequestConfiguration getRequestConfiguration() {\n        return new RequestConfiguration(\n                FileFormat.GIF,\n                URIMode.LocalContentProvider\n        );\n    }\n});  Set the result callback , which is called once the GIF is ready:  guggyButton.setCallback(new ITwoParamsCallback Result, RequestConfiguration () {\n    @Override\n    public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n        String gifURL = result.getUrl(); \n        // Insert in your app\n\n    }\n    @Override\n    public void onError(Exception e) {\n        // We didn't make it\n    }\n});", 
            "title": "GuggyButton"
        }, 
        {
            "location": "/#direct-api", 
            "text": "In your onClick handler, make the following call:  Guggy.createGug(\n        someString,\n        new RequestConfiguration(\n                FileFormat.MP4,\n                URIMode.LocalContentProvider\n        ),\n        getApplicationContext(),\n        new ITwoParamsCallback Result, RequestConfiguration () {\n            @Override\n            public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n\n                String generatedURL = result.getUrl();\n\n            }\n\n            @Override\n            public void onError(Exception e) {\n\n            }\n        }\n);  Note that the Guggy logo should be used as an image for the button.", 
            "title": "Direct API"
        }, 
        {
            "location": "/#media-preview", 
            "text": "You can allow your users to choose the GIF background before generating the\nresult. You can expect between one and four results to show the user.  Use the following method:  Guggy.getMedia(getTheText(), getApplicationContext(), new ICallback GetMediaResult () {\n    @Override\n    public void onComplete(GetMediaResult result) {\n\n        MediaItem mediaItem = result.getMedia().get(0); // Show the results to the user\n\n        // When the user has chosen, provide the request ID and the selected MediaItem\n        Guggy.createGug(\n                result.getReqId(),\n                mediaItem,\n                getTheText(),\n                new RequestConfiguration(FileFormat.MP4, URIMode.Remote),\n                getApplicationContext(),\n                new ITwoParamsCallback CreateGugResult, RequestConfiguration () {\n                    @Override\n                    public void onComplete(CreateGugResult gugResult, RequestConfiguration requestConfiguration) {\n\n                        String url = gugResult.getUrl();\n\n                    }\n\n                    @Override\n                    public void onError(Exception error) {\n\n                        String err = error.getMessage();\n\n                    }\n                }\n        );\n\n    }\n\n    @Override\n    public void onError(Exception error) {\n\n        // Handle\n\n    }\n});", 
            "title": "Media Preview"
        }, 
        {
            "location": "/#keyboard-developers", 
            "text": "", 
            "title": "Keyboard Developers"
        }, 
        {
            "location": "/#initializing", 
            "text": "Initializing Guggy with an InputMethodService allows fully automatic behaviour, that is, \nreading the text and handling the GIF generation callback.  Just call:  Guggy.init(\n         YOUR_API_KEY ,\n        this, // The InputMethodService\n        getApplicationContext()\n);", 
            "title": "Initializing"
        }, 
        {
            "location": "/#guggykeyboardbutton", 
            "text": "All that is needed is to create the button (via layout or programmatically).  Adding the button on top of a  KeyboardView  is possible. If that's what you want to achieve,\nlet us know for directions.  guggyKeyboardButton.setRequestConfigurationCallback(new IRequestConfigurationCallback() {\n    @Override\n    public RequestConfiguration getRequestConfiguration() {\n\n        // You can still get the auto detected configuration and inspect it\n        RequestConfiguration auto = guggyKeyboardButton.getAutoDetectedConfiguration();\n\n        return new RequestConfiguration(\n                FileFormat.GIF,\n                URIMode.LocalContentProvider\n        );\n\n    }\n});", 
            "title": "GuggyKeyboardButton"
        }, 
        {
            "location": "/#direct-api_1", 
            "text": "If you wish to implement your own View component, you can stil call the direct API, like so:  Guggy.createGug();", 
            "title": "Direct API"
        }, 
        {
            "location": "/#media-preview_1", 
            "text": "The API is a bit simplified compared to non-keyboard implementations:  Guggy.getMedia(new ICallback GetMediaResult () {\n    @Override\n    public void onComplete(GetMediaResult getMediaResult) {\n       // Allow the user to choose the MediaItem \n       MediaItem mediaItem = getMediaResult.getMedia().get(0);\n\n      // When ready, make the following call\n      Guggy.createGug(getMediaResult.getReqId(), mediaItem);\n    }\n\n    @Override\n    public void onError(Exception e) {\n\n    }\n});", 
            "title": "Media Preview"
        }, 
        {
            "location": "/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/#proguard", 
            "text": "Add the following to your proguard configuration:  -keep class com.guggy.** { *; }\n-dontwarn com.guggy.**", 
            "title": "Proguard"
        }, 
        {
            "location": "/#permissions", 
            "text": "For API 19 and up, only the INTERNET permission is needed.  For older APIs, the READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions\nare needed in order to save result files and enable other apps to use them.", 
            "title": "Permissions"
        }, 
        {
            "location": "/android/", 
            "text": "Getting Started\n\n\nGetting an API Key\n\n\nOur API is free. Contact us at \napi@guggy.com\n to retrieve an API Key.\n\n\nIncluding Guggy in your project\n\n\nAdd the following, under dependencies, in your app build.gradle file:\n\n\nrepositories {\n    maven {\n        url 'https://dl.bintray.com/guggy/maven/'\n    }\n}\n\n\n\n\nIn your dependencies part of the build.gradle file add:\n\n\ncompile 'com.guggy.guggysdk:guggy:1.0.3'\n\n\n\n\n\n\nHighly Recommended: Add the Guggy content provider to your\nAndroidManifest.xml. \n\nThis allows to share the GIFs via a secure content://\nuri\n\n\n\n\nprovider\n    android:name=\ncom.guggy.guggysdk.contentprovider.GuggyProvider\n\n    android:authorities=\nYOUR.PACKAGE.NAME.guggyprovider\n\n    android:exported=\nfalse\n\n    android:grantUriPermissions=\ntrue\n\n\n/provider\n\n\n\n\n\nIn a starting point in your app make the following call:\n\n\nGuggy.init(\n    \nYOUR_API_KEY\n,\n    getApplicationContext()\n);\n\n\n\n\nIn an exiting point in your app make the following call:\n\n\nGuggy.destroy();\n\n\n\n\nIf you must call \nGuggy.init()\n without destroying, you can check\n\nif Guggy is already initialized by calling \nGuggy.isInitialized()\n.    \n\n\nCreating GIFs\n\n\nThere are two options for creating GIFs:\n\n\nGuggyButton\n \u2014 A view which handles the API call to Guggy.\n\n\nDirect API\n \u2014 Allows to make the API call directly, but you\nwould need to implement the view yourself.\n\n\nGuggyButton\n\n\nPlace the button, either in a layout file or by creating it programmatically.\nFor example\n\n\nGuggyButton guggyButton = new GuggyButton();\n\n\n\nDefine a callback to retrieve the text once the button is clicked:\n\n\nguggyButton.setRetrieveTextFunction(new IRetrieveTextFunction() {\n    @Override\n    public String getText() {\n        return myEditText.getText()\n    }\n});\n\n\n\n\nSet the RequestConfigurationCallback, which sets the request parameters:\n\nFile format (MP4 or GIF), Result URI mode (Local File, Local Content, Remote\nURI) and result handler (Paste URL, Share Intent or a custom which you can\ndefine).\n\n\nguggyButton.setRequestConfigurationCallback(new IRequestConfigurationCallback() {\n    @Override\n    public RequestConfiguration getRequestConfiguration() {\n        return new RequestConfiguration(\n                FileFormat.GIF,\n                URIMode.LocalContentProvider\n        );\n    }\n});\n\n\n\n\nSet the result callback , which is called once the GIF is ready:\n\n\nguggyButton.setCallback(new ITwoParamsCallback\nResult, RequestConfiguration\n() {\n    @Override\n    public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n        String gifURL = result.getUrl(); \n        // Insert in your app\n\n    }\n    @Override\n    public void onError(Exception e) {\n        // We didn't make it\n    }\n});\n\n\n\n\n\n\nDirect API\n\n\nIn your onClick handler, make the following call:\n\n\nGuggy.createGug(\n        someString,\n        new RequestConfiguration(\n                FileFormat.MP4,\n                URIMode.LocalContentProvider\n        ),\n        getApplicationContext(),\n        new ITwoParamsCallback\nResult, RequestConfiguration\n() {\n            @Override\n            public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n\n                String generatedURL = result.getUrl();\n\n            }\n\n            @Override\n            public void onError(Exception e) {\n\n            }\n        }\n);\n\n\n\n\nNote that the Guggy logo should be used as an image for the button.\n\n\nMedia Preview\n\n\nYou can allow your users to choose the GIF background before generating the\nresult. You can expect between one and four results to show the user.\n\n\nUse the following method:\n\n\nGuggy.getMedia(getTheText(), getApplicationContext(), new ICallback\nGetMediaResult\n() {\n    @Override\n    public void onComplete(GetMediaResult result) {\n\n        MediaItem mediaItem = result.getMedia().get(0); // Show the results to the user\n\n        // When the user has chosen, provide the request ID and the selected MediaItem\n        Guggy.createGug(\n                result.getReqId(),\n                mediaItem,\n                getTheText(),\n                new RequestConfiguration(FileFormat.MP4, URIMode.Remote),\n                getApplicationContext(),\n                new ITwoParamsCallback\nCreateGugResult, RequestConfiguration\n() {\n                    @Override\n                    public void onComplete(CreateGugResult gugResult, RequestConfiguration requestConfiguration) {\n\n                        String url = gugResult.getUrl();\n\n                    }\n\n                    @Override\n                    public void onError(Exception error) {\n\n                        String err = error.getMessage();\n\n                    }\n                }\n        );\n\n    }\n\n    @Override\n    public void onError(Exception error) {\n\n        // Handle\n\n    }\n});\n\n\n\n\nKeyboard Developers\n\n\nInitializing\n\n\nInitializing Guggy with an InputMethodService allows fully automatic behaviour, that is,\n\nreading the text and handling the GIF generation callback.\n\n\nJust call:\n\n\nGuggy.init(\n        \nYOUR_API_KEY\n,\n        this, // The InputMethodService\n        getApplicationContext()\n);\n\n\n\n\nGuggyKeyboardButton\n\n\nAll that is needed is to create the button (via layout or programmatically).\n\n\nAdding the button on top of a \nKeyboardView\n is possible. If that's what you want to achieve,\nlet us know for directions.\n\n\nguggyKeyboardButton.setRequestConfigurationCallback(new IRequestConfigurationCallback() {\n    @Override\n    public RequestConfiguration getRequestConfiguration() {\n\n        // You can still get the auto detected configuration and inspect it\n        RequestConfiguration auto = guggyKeyboardButton.getAutoDetectedConfiguration();\n\n        return new RequestConfiguration(\n                FileFormat.GIF,\n                URIMode.LocalContentProvider\n        );\n\n    }\n});\n\n\n\n\nDirect API\n\n\nIf you wish to implement your own View component, you can stil call the direct API, like so:\n\n\nGuggy.createGug();\n\n\n\n\nMedia Preview\n\n\nThe API is a bit simplified compared to non-keyboard implementations:\n\n\nGuggy.getMedia(new ICallback\nGetMediaResult\n() {\n    @Override\n    public void onComplete(GetMediaResult getMediaResult) {\n       // Allow the user to choose the MediaItem \n       MediaItem mediaItem = getMediaResult.getMedia().get(0);\n\n      // When ready, make the following call\n      Guggy.createGug(getMediaResult.getReqId(), mediaItem);\n    }\n\n    @Override\n    public void onError(Exception e) {\n\n    }\n});\n\n\n\n\nNotes\n\n\nProguard\n\n\nAdd the following to your proguard configuration:\n\n\n-keep class com.guggy.** { *; }\n-dontwarn com.guggy.**\n\n\n\nPermissions\n\n\nFor API 19 and up, only the INTERNET permission is needed.\n\n\nFor older APIs, the READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions\nare needed in order to save result files and enable other apps to use them.", 
            "title": "Android"
        }, 
        {
            "location": "/android/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/android/#getting-an-api-key", 
            "text": "Our API is free. Contact us at  api@guggy.com  to retrieve an API Key.", 
            "title": "Getting an API Key"
        }, 
        {
            "location": "/android/#including-guggy-in-your-project", 
            "text": "Add the following, under dependencies, in your app build.gradle file:  repositories {\n    maven {\n        url 'https://dl.bintray.com/guggy/maven/'\n    }\n}  In your dependencies part of the build.gradle file add:  compile 'com.guggy.guggysdk:guggy:1.0.3'   Highly Recommended: Add the Guggy content provider to your\nAndroidManifest.xml.  \nThis allows to share the GIFs via a secure content://\nuri   provider\n    android:name= com.guggy.guggysdk.contentprovider.GuggyProvider \n    android:authorities= YOUR.PACKAGE.NAME.guggyprovider \n    android:exported= false \n    android:grantUriPermissions= true  /provider   In a starting point in your app make the following call:  Guggy.init(\n     YOUR_API_KEY ,\n    getApplicationContext()\n);  In an exiting point in your app make the following call:  Guggy.destroy();  If you must call  Guggy.init()  without destroying, you can check \nif Guggy is already initialized by calling  Guggy.isInitialized() .", 
            "title": "Including Guggy in your project"
        }, 
        {
            "location": "/android/#creating-gifs", 
            "text": "There are two options for creating GIFs:  GuggyButton  \u2014 A view which handles the API call to Guggy.  Direct API  \u2014 Allows to make the API call directly, but you\nwould need to implement the view yourself.", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/android/#guggybutton", 
            "text": "Place the button, either in a layout file or by creating it programmatically.\nFor example  GuggyButton guggyButton = new GuggyButton();  Define a callback to retrieve the text once the button is clicked:  guggyButton.setRetrieveTextFunction(new IRetrieveTextFunction() {\n    @Override\n    public String getText() {\n        return myEditText.getText()\n    }\n});  Set the RequestConfigurationCallback, which sets the request parameters: \nFile format (MP4 or GIF), Result URI mode (Local File, Local Content, Remote\nURI) and result handler (Paste URL, Share Intent or a custom which you can\ndefine).  guggyButton.setRequestConfigurationCallback(new IRequestConfigurationCallback() {\n    @Override\n    public RequestConfiguration getRequestConfiguration() {\n        return new RequestConfiguration(\n                FileFormat.GIF,\n                URIMode.LocalContentProvider\n        );\n    }\n});  Set the result callback , which is called once the GIF is ready:  guggyButton.setCallback(new ITwoParamsCallback Result, RequestConfiguration () {\n    @Override\n    public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n        String gifURL = result.getUrl(); \n        // Insert in your app\n\n    }\n    @Override\n    public void onError(Exception e) {\n        // We didn't make it\n    }\n});", 
            "title": "GuggyButton"
        }, 
        {
            "location": "/android/#direct-api", 
            "text": "In your onClick handler, make the following call:  Guggy.createGug(\n        someString,\n        new RequestConfiguration(\n                FileFormat.MP4,\n                URIMode.LocalContentProvider\n        ),\n        getApplicationContext(),\n        new ITwoParamsCallback Result, RequestConfiguration () {\n            @Override\n            public void onComplete(Result result, RequestConfiguration requestConfiguration) {\n\n                String generatedURL = result.getUrl();\n\n            }\n\n            @Override\n            public void onError(Exception e) {\n\n            }\n        }\n);  Note that the Guggy logo should be used as an image for the button.", 
            "title": "Direct API"
        }, 
        {
            "location": "/android/#media-preview", 
            "text": "You can allow your users to choose the GIF background before generating the\nresult. You can expect between one and four results to show the user.  Use the following method:  Guggy.getMedia(getTheText(), getApplicationContext(), new ICallback GetMediaResult () {\n    @Override\n    public void onComplete(GetMediaResult result) {\n\n        MediaItem mediaItem = result.getMedia().get(0); // Show the results to the user\n\n        // When the user has chosen, provide the request ID and the selected MediaItem\n        Guggy.createGug(\n                result.getReqId(),\n                mediaItem,\n                getTheText(),\n                new RequestConfiguration(FileFormat.MP4, URIMode.Remote),\n                getApplicationContext(),\n                new ITwoParamsCallback CreateGugResult, RequestConfiguration () {\n                    @Override\n                    public void onComplete(CreateGugResult gugResult, RequestConfiguration requestConfiguration) {\n\n                        String url = gugResult.getUrl();\n\n                    }\n\n                    @Override\n                    public void onError(Exception error) {\n\n                        String err = error.getMessage();\n\n                    }\n                }\n        );\n\n    }\n\n    @Override\n    public void onError(Exception error) {\n\n        // Handle\n\n    }\n});", 
            "title": "Media Preview"
        }, 
        {
            "location": "/android/#keyboard-developers", 
            "text": "", 
            "title": "Keyboard Developers"
        }, 
        {
            "location": "/android/#initializing", 
            "text": "Initializing Guggy with an InputMethodService allows fully automatic behaviour, that is, \nreading the text and handling the GIF generation callback.  Just call:  Guggy.init(\n         YOUR_API_KEY ,\n        this, // The InputMethodService\n        getApplicationContext()\n);", 
            "title": "Initializing"
        }, 
        {
            "location": "/android/#guggykeyboardbutton", 
            "text": "All that is needed is to create the button (via layout or programmatically).  Adding the button on top of a  KeyboardView  is possible. If that's what you want to achieve,\nlet us know for directions.  guggyKeyboardButton.setRequestConfigurationCallback(new IRequestConfigurationCallback() {\n    @Override\n    public RequestConfiguration getRequestConfiguration() {\n\n        // You can still get the auto detected configuration and inspect it\n        RequestConfiguration auto = guggyKeyboardButton.getAutoDetectedConfiguration();\n\n        return new RequestConfiguration(\n                FileFormat.GIF,\n                URIMode.LocalContentProvider\n        );\n\n    }\n});", 
            "title": "GuggyKeyboardButton"
        }, 
        {
            "location": "/android/#direct-api_1", 
            "text": "If you wish to implement your own View component, you can stil call the direct API, like so:  Guggy.createGug();", 
            "title": "Direct API"
        }, 
        {
            "location": "/android/#media-preview_1", 
            "text": "The API is a bit simplified compared to non-keyboard implementations:  Guggy.getMedia(new ICallback GetMediaResult () {\n    @Override\n    public void onComplete(GetMediaResult getMediaResult) {\n       // Allow the user to choose the MediaItem \n       MediaItem mediaItem = getMediaResult.getMedia().get(0);\n\n      // When ready, make the following call\n      Guggy.createGug(getMediaResult.getReqId(), mediaItem);\n    }\n\n    @Override\n    public void onError(Exception e) {\n\n    }\n});", 
            "title": "Media Preview"
        }, 
        {
            "location": "/android/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/android/#proguard", 
            "text": "Add the following to your proguard configuration:  -keep class com.guggy.** { *; }\n-dontwarn com.guggy.**", 
            "title": "Proguard"
        }, 
        {
            "location": "/android/#permissions", 
            "text": "For API 19 and up, only the INTERNET permission is needed.  For older APIs, the READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE permissions\nare needed in order to save result files and enable other apps to use them.", 
            "title": "Permissions"
        }, 
        {
            "location": "/ios-swift/", 
            "text": "Getting Started\n\n\nGetting an API Key\n\n\nOur API is free. Contact us at \napi@guggy.com\n to retrieve an API Key.\n\n\nIncluding Guggy in your project\n\n\nIn your \npodfile\n, insert the following line:\n\n\npod \u2018guggysdk\u2019, \u2018~\n 0.0.1\n\n\n\n\nIn every file referencing Guggy add the following\n\n\nimport guggysdk\n\n\n\n\nIn a starting point in your app make the following call:\n\n\ntry! Guggy.initialize(YOUR_API_KEY_HERE) // Throws an AlreadyInitialized error\n\n\n\n\nIn an exiting point in your app make the following call:\n\n\nGuggy.destroy();\n\n\n\n\nCreating GIFs\n\n\nThere are two options for creating GIFs:\n\n\nGuggyButton\n \u2014 A UIButton which handles the API call to Guggy.\n\n\nDirect API\n \u2014 Allows to make the API call directly, but you\nwould need to implement the view yourself.\n\n\nGuggyButton\n\n\nChoose one of the variations of GuggyButton:\n\n\nGuggyRetrieveFileButton\n - Returns NSData representation of the GIF\n\n\nGuggyCopyToClipboardButton \n - Places the GIF data in clipboard\n\n\nGuggyRetrieveURLButton\n - Returns the URL for the GIF\n\n\nPlace the button by creating it programmatically (Not supported via Interface Builder). For example:\n\n\nlet guggyButton = GuggyRetrieveFileButton(frame: CGRect(x: 0, y: 300, width: 100, height: 100))\n\n\n\n\nDefine a callback to retrieve the text once the button is clicked:\n\n\nguggyButton.retrieveTextCallback = {\n\n    return self.textField.text!\n\n}\n\n\n\n\nSet the result callbacks , which are called once the GIF is ready:\n\n\nguggyButton.onSuccessCallback = { resultNSData in\n\n   self.imageView.image = UIImage.gifWithData(resultNSData)\n\n}\n\nguggyButton.onErrorCallback = { err in\n\n    print(err)\n\n}\n\n\n\n\n\n\nDirect API\n\n\nIn your onClick handler, make one of the following calls, according to your needs:\n\n\nGuggy.createGugAndRetrieveFile(text: String, onSuccess: NSData -\n Void, onError: String -\n Void)\nGuggy.createGugAndCopyToClipboard(text: String, onSuccess: Void -\n Void, onError: String -\n Void)\nGuggy.createGugAndRetrieveURL(text: String, onSuccess: guggysdk.Result -\n Void, onError: String -\n Void)\n\n\n\n\nFor example:\n\n\nGuggy.createGugAndRetrieveURL(\n\n    textField.text!,\n    onSuccess: {\n        result in\n        print(result.url)\n    },     \n    onError: {\n        err in\n        print(err)       \n     }   \n)\n\n\n\n\nNote that the Guggy logo should be used as an image for the button.", 
            "title": "iOS (Swift)"
        }, 
        {
            "location": "/ios-swift/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/ios-swift/#getting-an-api-key", 
            "text": "Our API is free. Contact us at  api@guggy.com  to retrieve an API Key.", 
            "title": "Getting an API Key"
        }, 
        {
            "location": "/ios-swift/#including-guggy-in-your-project", 
            "text": "In your  podfile , insert the following line:  pod \u2018guggysdk\u2019, \u2018~  0.0.1  In every file referencing Guggy add the following  import guggysdk  In a starting point in your app make the following call:  try! Guggy.initialize(YOUR_API_KEY_HERE) // Throws an AlreadyInitialized error  In an exiting point in your app make the following call:  Guggy.destroy();", 
            "title": "Including Guggy in your project"
        }, 
        {
            "location": "/ios-swift/#creating-gifs", 
            "text": "There are two options for creating GIFs:  GuggyButton  \u2014 A UIButton which handles the API call to Guggy.  Direct API  \u2014 Allows to make the API call directly, but you\nwould need to implement the view yourself.", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/ios-swift/#guggybutton", 
            "text": "Choose one of the variations of GuggyButton:  GuggyRetrieveFileButton  - Returns NSData representation of the GIF  GuggyCopyToClipboardButton   - Places the GIF data in clipboard  GuggyRetrieveURLButton  - Returns the URL for the GIF  Place the button by creating it programmatically (Not supported via Interface Builder). For example:  let guggyButton = GuggyRetrieveFileButton(frame: CGRect(x: 0, y: 300, width: 100, height: 100))  Define a callback to retrieve the text once the button is clicked:  guggyButton.retrieveTextCallback = {\n\n    return self.textField.text!\n\n}  Set the result callbacks , which are called once the GIF is ready:  guggyButton.onSuccessCallback = { resultNSData in\n\n   self.imageView.image = UIImage.gifWithData(resultNSData)\n\n}\n\nguggyButton.onErrorCallback = { err in\n\n    print(err)\n\n}", 
            "title": "GuggyButton"
        }, 
        {
            "location": "/ios-swift/#direct-api", 
            "text": "In your onClick handler, make one of the following calls, according to your needs:  Guggy.createGugAndRetrieveFile(text: String, onSuccess: NSData -  Void, onError: String -  Void)\nGuggy.createGugAndCopyToClipboard(text: String, onSuccess: Void -  Void, onError: String -  Void)\nGuggy.createGugAndRetrieveURL(text: String, onSuccess: guggysdk.Result -  Void, onError: String -  Void)  For example:  Guggy.createGugAndRetrieveURL(\n\n    textField.text!,\n    onSuccess: {\n        result in\n        print(result.url)\n    },     \n    onError: {\n        err in\n        print(err)       \n     }   \n)  Note that the Guggy logo should be used as an image for the button.", 
            "title": "Direct API"
        }, 
        {
            "location": "/web-sdk/", 
            "text": "Getting Started\n\n\nGetting an API Key\n\n\nOur API is free. Contact us at \napi@guggy.com\n to retrieve an API Key.\n\n\nIncluding the SDK in your site\n\n\nInclude the script tag:\n\n\nscript src=\nhttps://cdn.rawgit.com/Guggyco/guggy-web-sdk/master/guggy-sdk-min.js\n/script\n\n\n\n\n\nInitializing Guggy\n\n\nOptions are:\n\n\napiKey\n - \nMandatory\n\n\ntypeMode\n - Allow sending keystrokes to Guggy in order to retrieve a preview of the GIF background\n\n\nretrieveTextFunction\n - Tell Guggy which text to use when creating the GIF. \nMandatory if using GuggyButton.\n\n\nonStart\n - Optional callback to be excuted when the GIF generation starts.\n\n\nonSuccess\n - Optional callback to be excuted when the GIF generation completes. \nOnly applicable if not using the preview\n\n\nshowPreview\n - If using GuggyButton a preview will be shown. \ndefault: false\n,\n\n\nonSelectFunction\n - Callback to be executed when clicking on the item in the preview.\n\n\nGuggy.init({\n    opts\n});\n\n\n\n\nGuggyButton\n\n\nAdd the button to your page:\n\n\nvar div = document.getElementById('yourContainer');\n\ndiv.appendChild(Guggy.GuggyButton);\n\n\n\n\nPreviewing results\n\n\nYou can preview the background GIF as the user types.\n\n\n\n\nThe preview is in mp4 format.\n\n\n\n\nInit Guggy with the \ntypeMode\n option set to \ntrue\n\n\nThen call \nGuggy.onType\n on your keyDown or equivalent event.\n\n\nGuggy.onType(input.value, function (reqId, mediaItem) {\n\n    // If the result was equal to the last result, reqId will be null\n    if (reqId) {\n\n        someVideoElement.src = mediaItem.url;\n\n    }\n\n})\n\n\n\n\nPressing on GuggyButton will produce the GIF according the last result previewed.\n\n\nDirect API\n\n\nIf you're using the direct API, just initialize with the \napiKey\n option.\n\n\nThen call Guggy whenever's needed:\n\n\nGuggy.createGug(sentence, function (result, err) {\n   // Handle result\n});", 
            "title": "Web SDK"
        }, 
        {
            "location": "/web-sdk/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/web-sdk/#getting-an-api-key", 
            "text": "Our API is free. Contact us at  api@guggy.com  to retrieve an API Key.", 
            "title": "Getting an API Key"
        }, 
        {
            "location": "/web-sdk/#including-the-sdk-in-your-site", 
            "text": "Include the script tag:  script src= https://cdn.rawgit.com/Guggyco/guggy-web-sdk/master/guggy-sdk-min.js /script", 
            "title": "Including the SDK in your site"
        }, 
        {
            "location": "/web-sdk/#initializing-guggy", 
            "text": "Options are:  apiKey  -  Mandatory  typeMode  - Allow sending keystrokes to Guggy in order to retrieve a preview of the GIF background  retrieveTextFunction  - Tell Guggy which text to use when creating the GIF.  Mandatory if using GuggyButton.  onStart  - Optional callback to be excuted when the GIF generation starts.  onSuccess  - Optional callback to be excuted when the GIF generation completes.  Only applicable if not using the preview  showPreview  - If using GuggyButton a preview will be shown.  default: false ,  onSelectFunction  - Callback to be executed when clicking on the item in the preview.  Guggy.init({\n    opts\n});", 
            "title": "Initializing Guggy"
        }, 
        {
            "location": "/web-sdk/#guggybutton", 
            "text": "Add the button to your page:  var div = document.getElementById('yourContainer');\n\ndiv.appendChild(Guggy.GuggyButton);", 
            "title": "GuggyButton"
        }, 
        {
            "location": "/web-sdk/#previewing-results", 
            "text": "You can preview the background GIF as the user types.   The preview is in mp4 format.   Init Guggy with the  typeMode  option set to  true  Then call  Guggy.onType  on your keyDown or equivalent event.  Guggy.onType(input.value, function (reqId, mediaItem) {\n\n    // If the result was equal to the last result, reqId will be null\n    if (reqId) {\n\n        someVideoElement.src = mediaItem.url;\n\n    }\n\n})  Pressing on GuggyButton will produce the GIF according the last result previewed.", 
            "title": "Previewing results"
        }, 
        {
            "location": "/web-sdk/#direct-api", 
            "text": "If you're using the direct API, just initialize with the  apiKey  option.  Then call Guggy whenever's needed:  Guggy.createGug(sentence, function (result, err) {\n   // Handle result\n});", 
            "title": "Direct API"
        }, 
        {
            "location": "/rest-api/", 
            "text": "Getting Started\n\n\nGetting an API Key\n\n\nOur API is free. Contact us at \napi@guggy.com\n to retrieve an API Key.\n\n\nCreating GIFs\n\n\nSend a POST request to \n\n\nhttp://text2gif.guggy.com/guggify\n\n\n\n\nThe request headers should include:\n\n\n{\n    \nContent-Type\n:\napplication/json\n,\n    \napiKey\n:\nYOUR_API_KEY\n\n}\n\n\n\n\nThe request body should contain:\n\n\n{\n    \nformat\n: \nmp4\n, // either \ngif\n or \nmp4\n\n    \nsentence\n : \nsome sentence\n\n}\n\n\n\n\nThe response will be in the format of:\n\n\n{\n  \nreqId\n: \n5Ow7Ej46Sy\n,\n  \nmp4\n: \nhttps://i.guggy.com/SOMETHING.mp4\n, // or GIF\n  \nwidth\n: 300,\n  \nheight\n: 238\n}\n\n\n\n\nMedia Preview\n\n\nYou can allow your users to choose the GIF background before generating the\nresult. You can expect between one and four results to show the user.\n\n\nSend a POST request to \n\n\nhttp://text2gif.guggy.com/extractMedia\n\n\n\n\nThe request headers should include:\n\n\n{\n    \nContent-Type\n:\napplication/json\n,\n    \napiKey\n:\nYOUR_API_KEY\n\n}\n\n\n\n\nThe request body should contain:\n\n\n{\n    \nsentence\n : \nsome sentence\n\n}\n\n\n\n\nThe response will be in the format of:\n\n\n{\n  \nreqId\n: \nQAOMfoLzbo\n,\n  \nmedia\n: [\n    {\n      \nurl\n: \nhttp://url1.mp4\n,\n      \ndimensions\n: {\n        \nwidth\n: 480,\n        \nheight\n: 270\n      },\n      \nisStillImage\n: false,\n      \nratio\n: 0.5625\n    },\n    ... // More results\n  ]\n}    \n\n\n\n\nOnce choosing one of the URLs, make another request to:\n\n\nhttp://text2gif.guggy.com/guggify\n\n\n\n\nWith the same headers.\n\n\nThe request body should be in the format of:\n\n\n{\n    \nformat\n: \nmp4\n, // either \ngif\n or \nmp4\n\n    \nsentence\n : \nsome sentence\n,\n    \nreqId\n: \nQAOMfoLzbo\n, // use same req id from mediaExtract response\n    \npredefinedSource\n: {\n        \nurl\n: \nhttp://image1.mp4\n, // chosen url \n        \ncanvasDimensions\n: { // dimensions of chosen \n            \nwidth\n: 500,\n            \nheight\n: 393\n        },\n        \nisStillImage\n: false // same as from extractMedia response\n    }\n}", 
            "title": "Rest API"
        }, 
        {
            "location": "/rest-api/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/rest-api/#getting-an-api-key", 
            "text": "Our API is free. Contact us at  api@guggy.com  to retrieve an API Key.", 
            "title": "Getting an API Key"
        }, 
        {
            "location": "/rest-api/#creating-gifs", 
            "text": "Send a POST request to   http://text2gif.guggy.com/guggify  The request headers should include:  {\n     Content-Type : application/json ,\n     apiKey : YOUR_API_KEY \n}  The request body should contain:  {\n     format :  mp4 , // either  gif  or  mp4 \n     sentence  :  some sentence \n}  The response will be in the format of:  {\n   reqId :  5Ow7Ej46Sy ,\n   mp4 :  https://i.guggy.com/SOMETHING.mp4 , // or GIF\n   width : 300,\n   height : 238\n}", 
            "title": "Creating GIFs"
        }, 
        {
            "location": "/rest-api/#media-preview", 
            "text": "You can allow your users to choose the GIF background before generating the\nresult. You can expect between one and four results to show the user.  Send a POST request to   http://text2gif.guggy.com/extractMedia  The request headers should include:  {\n     Content-Type : application/json ,\n     apiKey : YOUR_API_KEY \n}  The request body should contain:  {\n     sentence  :  some sentence \n}  The response will be in the format of:  {\n   reqId :  QAOMfoLzbo ,\n   media : [\n    {\n       url :  http://url1.mp4 ,\n       dimensions : {\n         width : 480,\n         height : 270\n      },\n       isStillImage : false,\n       ratio : 0.5625\n    },\n    ... // More results\n  ]\n}      Once choosing one of the URLs, make another request to:  http://text2gif.guggy.com/guggify  With the same headers.  The request body should be in the format of:  {\n     format :  mp4 , // either  gif  or  mp4 \n     sentence  :  some sentence ,\n     reqId :  QAOMfoLzbo , // use same req id from mediaExtract response\n     predefinedSource : {\n         url :  http://image1.mp4 , // chosen url \n         canvasDimensions : { // dimensions of chosen \n             width : 500,\n             height : 393\n        },\n         isStillImage : false // same as from extractMedia response\n    }\n}", 
            "title": "Media Preview"
        }
    ]
}